{"pageProps":{"note":{"id":"ff8mayjzbflxo1x6rtl7gse","title":"Vim","desc":"","updated":1640814157620,"created":1638143057403,"custom":{},"fname":"computer.vim","type":"note","vault":{"fsPath":".","selfContained":true,"name":"notes"},"contentHash":"3283bc27e5704575691debaff9cf7e46","links":[{"type":"wiki","from":{"fname":"computer.vim","id":"ff8mayjzbflxo1x6rtl7gse","vaultName":"notes"},"value":"user.a","alias":"@a","position":{"start":{"line":311,"column":3,"offset":6796},"end":{"line":311,"column":5,"offset":6798},"indent":[]},"xvault":false,"to":{"fname":"user.a"}},{"type":"wiki","from":{"fname":"computer.vim","id":"ff8mayjzbflxo1x6rtl7gse","vaultName":"notes"},"value":"tags.th","alias":"#th","position":{"start":{"line":429,"column":42,"offset":9590},"end":{"line":429,"column":45,"offset":9593},"indent":[]},"xvault":false,"to":{"fname":"tags.th"}}],"anchors":{"vim-cheat-sheet":{"type":"header","text":"Vim Cheat Sheet","value":"vim-cheat-sheet","line":11,"column":0,"depth":3},"global":{"type":"header","text":"Global","value":"global","line":13,"column":0,"depth":3},"run-vimtutor-in-a-terminal-to-learn-the-first-vim-commands":{"type":"header","text":"Run vimtutor in a terminal to learn the first Vim commands.","value":"run-vimtutor-in-a-terminal-to-learn-the-first-vim-commands","line":25,"column":0,"depth":2},"cursor-movement":{"type":"header","text":"Cursor movement","value":"cursor-movement","line":27,"column":0,"depth":3},"prefix-a-cursor-movement-command-with-a-number-to-repeat-it-for-example-4j-moves-down-4-lines":{"type":"header","text":"Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines.","value":"prefix-a-cursor-movement-command-with-a-number-to-repeat-it-for-example-4j-moves-down-4-lines","line":109,"column":0,"depth":3},"insert-mode---insertingappending-text":{"type":"header","text":"Insert mode - inserting/appending text","value":"insert-mode---insertingappending-text","line":111,"column":0,"depth":3},"editing":{"type":"header","text":"Editing","value":"editing","line":147,"column":0,"depth":3},"marking-text-visual-mode":{"type":"header","text":"Marking text (visual mode)","value":"marking-text-visual-mode","line":189,"column":0,"depth":3},"instead-of-b-or-b-one-can-also-use--or--respectively":{"type":"header","text":"Instead of b or B one can also use ( or { respectively.","value":"instead-of-b-or-b-one-can-also-use--or--respectively","line":217,"column":0,"depth":3},"visual-commands":{"type":"header","text":"Visual commands","value":"visual-commands","line":219,"column":0,"depth":3},"registers-are-being-stored-in-viminfo-and-will-be-loaded-again-on-next-restart-of-vim":{"type":"header","text":"Registers are being stored in ~/.viminfo, and will be loaded again on next restart of vim.","value":"registers-are-being-stored-in-viminfo-and-will-be-loaded-again-on-next-restart-of-vim","line":247,"column":0,"depth":3},"special-registers":{"type":"header","text":"Special registers:","value":"special-registers","line":249,"column":0,"depth":3},"marks-and-positions":{"type":"header","text":"Marks and positions","value":"marks-and-positions","line":275,"column":0,"depth":3},"to-jump-to-a-mark-you-can-either-use-a-backtick--or-an-apostrophe--using-an-apostrophe-jumps-to-the-beginning-first-non-blank-of-the-line-holding-the-mark":{"type":"header","text":"To jump to a mark you can either use a backtick (`) or an apostrophe ('). Using an apostrophe jumps to the beginning (first non-blank) of the line holding the mark.","value":"to-jump-to-a-mark-you-can-either-use-a-backtick--or-an-apostrophe--using-an-apostrophe-jumps-to-the-beginning-first-non-blank-of-the-line-holding-the-mark","line":309,"column":0,"depth":3},"macros":{"type":"header","text":"Macros","value":"macros","line":311,"column":0,"depth":3},"cut-and-paste":{"type":"header","text":"Cut and paste","value":"cut-and-paste","line":321,"column":0,"depth":3},"indent-text":{"type":"header","text":"Indent text","value":"indent-text","line":355,"column":0,"depth":3},"exiting":{"type":"header","text":"Exiting","value":"exiting","line":377,"column":0,"depth":3},"search-and-replace":{"type":"header","text":"Search and replace","value":"search-and-replace","line":391,"column":0,"depth":3},"search-in-multiple-files":{"type":"header","text":"Search in multiple files","value":"search-in-multiple-files","line":409,"column":0,"depth":3},"tabs":{"type":"header","text":"Tabs","value":"tabs","line":423,"column":0,"depth":3},"working-with-multiple-files":{"type":"header","text":"Working with multiple files","value":"working-with-multiple-files","line":443,"column":0,"depth":3},"diff":{"type":"header","text":"Diff","value":"diff","line":487,"column":0,"depth":3},"the-commands-for-folding-eg-za-operate-on-one-level-to-operate-on-all-levels-use-uppercase-letters-eg-za":{"type":"header","text":"The commands for folding (e.g. za) operate on one level. To operate on all levels, use uppercase letters (e.g. zA).","value":"the-commands-for-folding-eg-za-operate-on-one-level-to-operate-on-all-levels-use-uppercase-letters-eg-za","line":519,"column":0,"depth":3},"to-view-the-differences-of-files-one-can-directly-start-vim-in-diff-mode-by-running-vimdiff-in-a-terminal-one-can-even-set-this-as-git-difftool":{"type":"header","text":"To view the differences of files, one can directly start Vim in diff mode by running vimdiff in a terminal. One can even set this as git difftool.","value":"to-view-the-differences-of-files-one-can-directly-start-vim-in-diff-mode-by-running-vimdiff-in-a-terminal-one-can-even-set-this-as-git-difftool","line":521,"column":0,"depth":3}},"children":[],"parent":"67vcv6zhh0cxazsfqlaai29","data":{}},"body":"<h1 id=\"vim\">Vim<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vim\"></a></h1>\n<h3 id=\"vim-cheat-sheet\">Vim Cheat Sheet<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vim-cheat-sheet\"></a></h3>\n<p>Copied from <a href=\"https://vim.rtorr.com/\">https://vim.rtorr.com/</a></p>\n<h3 id=\"global\">Global<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#global\"></a></h3>\n<p>●\t:h[elp] keyword - open help for keyword </p>\n<p>●\t:sav[eas] file - save file as </p>\n<p>●\t:clo[se] - close current pane </p>\n<p>●\t:ter[minal] - open a terminal window </p>\n<p>●\tK - open man page for word under the cursor </p>\n<h2 id=\"run-vimtutor-in-a-terminal-to-learn-the-first-vim-commands\">Run vimtutor in a terminal to learn the first Vim commands.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#run-vimtutor-in-a-terminal-to-learn-the-first-vim-commands\"></a></h2>\n<h3 id=\"cursor-movement\">Cursor movement<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cursor-movement\"></a></h3>\n<p>●\th - move cursor left   </p>\n<p>●\tj - move cursor down </p>\n<p>●\tk - move cursor up </p>\n<p>●\tl - move cursor right </p>\n<p>●\tH - move to top of screen </p>\n<p>●\tM - move to middle of screen </p>\n<p>●\tL - move to bottom of screen </p>\n<p>●\tw - jump forwards to the start of a word </p>\n<p>●\tW - jump forwards to the start of a word (words can contain punctuation) </p>\n<p>●\te - jump forwards to the end of a word </p>\n<p>●\tE - jump forwards to the end of a word (words can contain punctuation) </p>\n<p>●\tb - jump backwards to the start of a word </p>\n<p>●\tB - jump backwards to the start of a word (words can contain punctuation) </p>\n<p>●\tge - jump backwards to the end of a word </p>\n<p>●\tgE - jump backwards to the end of a word (words can contain punctuation) </p>\n<p>●\t% - move to matching character (default supported pairs: '()', '{}', '[]' - use :h matchpairs in vim for more info) </p>\n<p>●\t0 - jump to the start of the line </p>\n<p>●\t^ - jump to the first non-blank character of the line </p>\n<p>●\t$ - jump to the end of the line </p>\n<p>●\tg_ - jump to the last non-blank character of the line </p>\n<p>●\tgg - go to the first line of the document </p>\n<p>●\tG - go to the last line of the document </p>\n<p>●\t5gg or 5G - go to line 5 </p>\n<p>●\tgd - move to local declaration </p>\n<p>●\tgD - move to global declaration </p>\n<p>●\tfx - jump to next occurrence of character x </p>\n<p>●\ttx - jump to before next occurrence of character x </p>\n<p>●\tFx - jump to previous occurence of character x </p>\n<p>●\tTx - jump to after previous occurence of character x </p>\n<p>●\t; - repeat previous f, t, F or T movement </p>\n<p>●\t, - repeat previous f, t, F or T movement, backwards </p>\n<p>●\t} - jump to next paragraph (or function/block, when editing code) </p>\n<p>●\t{ - jump to previous paragraph (or function/block, when editing code) </p>\n<p>●\tzz - center cursor on screen </p>\n<p>●\tCtrl + e - move screen down one line (without moving cursor) </p>\n<p>●\tCtrl + y - move screen up one line (without moving cursor) </p>\n<p>●\tCtrl + b - move back one full screen </p>\n<p>●\tCtrl + f - move forward one full screen </p>\n<p>●\tCtrl + d - move forward 1/2 a screen </p>\n<p>●\tCtrl + u - move back 1/2 a screen </p>\n<h3 id=\"prefix-a-cursor-movement-command-with-a-number-to-repeat-it-for-example-4j-moves-down-4-lines\">Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prefix-a-cursor-movement-command-with-a-number-to-repeat-it-for-example-4j-moves-down-4-lines\"></a></h3>\n<h3 id=\"insert-mode---insertingappending-text\">Insert mode - inserting/appending text<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#insert-mode---insertingappending-text\"></a></h3>\n<p>●\ti - insert before the cursor </p>\n<p>●\tI - insert at the beginning of the line </p>\n<p>●\ta - insert (append) after the cursor </p>\n<p>●\tA - insert (append) at the end of the line </p>\n<p>●\to - append (open) a new line below the current line </p>\n<p>●\tO - append (open) a new line above the current line </p>\n<p>●\tea - insert (append) at the end of the word </p>\n<p>●\tCtrl + h - delete the character before the cursor during insert mode </p>\n<p>●\tCtrl + w - delete word before the cursor during insert mode </p>\n<p>●\tCtrl + j - begin new line during insert mode </p>\n<p>●\tCtrl + t - indent (move right) line one shiftwidth during insert mode </p>\n<p>●\tCtrl + d - de-indent (move left) line one shiftwidth during insert mode </p>\n<p>●\tCtrl + n - insert (auto-complete) next match before the cursor during insert mode </p>\n<p>●\tCtrl + p - insert (auto-complete) previous match before the cursor during insert mode </p>\n<p>●\tCtrl + rx - insert the contents of register x </p>\n<p>●\tCtrl + ox - Temporarily enter normal mode to issue one normal-mode command x. </p>\n<p>●\tEsc - exit insert mode </p>\n<h3 id=\"editing\">Editing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#editing\"></a></h3>\n<p>●\tr - replace a single character. </p>\n<p>●\tR - replace more than one character, until ESC is pressed. </p>\n<p>●\tJ - join line below to the current one with one space in between </p>\n<p>●\tgJ - join line below to the current one without space in between </p>\n<p>●\tgwip - reflow paragraph </p>\n<p>●\tg~ - switch case up to motion </p>\n<p>●\tgu - change to lowercase up to motion </p>\n<p>●\tgU - change to uppercase up to motion </p>\n<p>●\tcc - change (replace) entire line </p>\n<p>●\tC - change (replace) to the end of the line </p>\n<p>●\tc$ - change (replace) to the end of the line </p>\n<p>●\tciw - change (replace) entire word </p>\n<p>●\tcw or ce - change (replace) to the end of the word </p>\n<p>●\ts - delete character and substitute text </p>\n<p>●\tS - delete line and substitute text (same as cc) </p>\n<p>●\txp - transpose two letters (delete and paste) </p>\n<p>●\tu - undo </p>\n<p>●\tU - restore (undo) last changed line </p>\n<p>●\tCtrl + r - redo </p>\n<p>●\t. - repeat last command </p>\n<h3 id=\"marking-text-visual-mode\">Marking text (visual mode)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#marking-text-visual-mode\"></a></h3>\n<p>●\tv - start visual mode, mark lines, then do a command (like y-yank) </p>\n<p>●\tV - start linewise visual mode </p>\n<p>●\to - move to other end of marked area </p>\n<p>●\tCtrl + v - start visual block mode </p>\n<p>●\tO - move to other corner of block </p>\n<p>●\taw - mark a word </p>\n<p>●\tab - a block with () </p>\n<p>●\taB - a block with {} </p>\n<p>●\tat - a block with &#x3C;> tags </p>\n<p>●\tib - inner block with () </p>\n<p>●\tiB - inner block with {} </p>\n<p>●\tit - inner block with &#x3C;> tags </p>\n<p>●\tEsc - exit visual mode </p>\n<h3 id=\"instead-of-b-or-b-one-can-also-use--or--respectively\">Instead of b or B one can also use ( or { respectively.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#instead-of-b-or-b-one-can-also-use--or--respectively\"></a></h3>\n<h3 id=\"visual-commands\">Visual commands<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#visual-commands\"></a></h3>\n<p>●\t> - shift text right </p>\n<p>●\t&#x3C; - shift text left </p>\n<p>●\ty - yank (copy) marked text </p>\n<p>●\td - delete marked text </p>\n<p>●\t~ - switch case </p>\n<p>●\tu - change marked text to lowercase </p>\n<p>●\tU - change marked text to uppercase </p>\n<p>Registers </p>\n<p>●\t:reg[isters] - show registers content </p>\n<p>●\t\"xy - yank into register x </p>\n<p>●\t\"xp - paste contents of register x </p>\n<p>●\t\"+y - yank into the system clipboard register </p>\n<p>●\t\"+p - paste from the system clipboard register </p>\n<h3 id=\"registers-are-being-stored-in-viminfo-and-will-be-loaded-again-on-next-restart-of-vim\">Registers are being stored in ~/.viminfo, and will be loaded again on next restart of vim.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#registers-are-being-stored-in-viminfo-and-will-be-loaded-again-on-next-restart-of-vim\"></a></h3>\n<h3 id=\"special-registers\">Special registers:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#special-registers\"></a></h3>\n<p> 0 - last yank </p>\n<p> \" - unnamed register, last delete or yank </p>\n<p> % - current file name </p>\n<p> # - alternate file name </p>\n<p> * - clipboard contents (X11 primary) </p>\n<p> + - clipboard contents (X11 clipboard) </p>\n<p> / - last search pattern </p>\n<p> : - last command-line </p>\n<p> . - last inserted text </p>\n<p> - - last small (less than a line) delete </p>\n<p> = - expression register </p>\n<p> _ - black hole register </p>\n<h3 id=\"marks-and-positions\">Marks and positions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#marks-and-positions\"></a></h3>\n<p>●\t:marks - list of marks </p>\n<p>●\tma - set current position for mark A </p>\n<p>●\t`a - jump to position of mark A </p>\n<p>●\ty`a - yank text to position of mark A </p>\n<p>●\t`0 - go to the position where Vim was previously exited </p>\n<p>●\t`\" - go to the position when last editing this file </p>\n<p>●\t`. - go to the position of the last change in this file </p>\n<p>●\t`` - go to the position before the last jump </p>\n<p>●\t:ju[mps] - list of jumps </p>\n<p>●\tCtrl + i - go to newer position in jump list </p>\n<p>●\tCtrl + o - go to older position in jump list </p>\n<p>●\t:changes - list of changes </p>\n<p>●\tg, - go to newer position in change list </p>\n<p>●\tg; - go to older position in change list </p>\n<p>●\tCtrl + ] - jump to the tag under cursor </p>\n<p>●\t:set number = add number lines</p>\n<h3 id=\"to-jump-to-a-mark-you-can-either-use-a-backtick--or-an-apostrophe--using-an-apostrophe-jumps-to-the-beginning-first-non-blank-of-the-line-holding-the-mark\">To jump to a mark you can either use a backtick (`) or an apostrophe ('). Using an apostrophe jumps to the beginning (first non-blank) of the line holding the mark.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#to-jump-to-a-mark-you-can-either-use-a-backtick--or-an-apostrophe--using-an-apostrophe-jumps-to-the-beginning-first-non-blank-of-the-line-holding-the-mark\"></a></h3>\n<h3 id=\"macros\">Macros<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#macros\"></a></h3>\n<p>●\tqa - record macro a </p>\n<p>●\tq - stop recording macro </p>\n<p>●\t<a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@a (Private)</a> - run macro a </p>\n<p>●\t@@ - rerun last run macro </p>\n<h3 id=\"cut-and-paste\">Cut and paste<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cut-and-paste\"></a></h3>\n<p>●\tyy - yank (copy) a line </p>\n<p>●\t2yy - yank (copy) 2 lines </p>\n<p>●\tyw - yank (copy) the characters of the word from the cursor position to the start of the next word </p>\n<p>●\tyiw - yank (copy) word under the cursor </p>\n<p>●\tyaw - yank (copy) word under the cursor and the space after or before it </p>\n<p>●\ty$ - yank (copy) to end of line </p>\n<p>●\tp - put (paste) the clipboard after cursor </p>\n<p>●\tP - put (paste) before cursor </p>\n<p>●\tdd - delete (cut) a line </p>\n<p>●\t2dd - delete (cut) 2 lines </p>\n<p>●\tdw - delete (cut) the characters of the word from the cursor position to the start of the next word </p>\n<p>●\tdiw - delete (cut) word under the cursor </p>\n<p>●\tdaw - delete (cut) word under the cursor and the space after or before it </p>\n<p>●\tD - delete (cut) to the end of the line </p>\n<p>●\td$ - delete (cut) to the end of the line </p>\n<p>●\tx - delete (cut) character </p>\n<h3 id=\"indent-text\">Indent text<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#indent-text\"></a></h3>\n<p>●\t>> - indent (move right) line one shiftwidth </p>\n<p>●\t&#x3C;&#x3C; - de-indent (move left) line one shiftwidth </p>\n<p>●\t>% - indent a block with () or {} (cursor on brace) </p>\n<p>●\t>ib - indent inner block with () </p>\n<p>●\t>at - indent a block with &#x3C;> tags </p>\n<p>●\t3== - re-indent 3 lines </p>\n<p>●\t=% - re-indent a block with () or {} (cursor on brace) </p>\n<p>●\t=iB - re-indent inner block with {} </p>\n<p>●\tgg=G - re-indent entire buffer </p>\n<p>●\t]p - paste and adjust indent to current line </p>\n<h3 id=\"exiting\">Exiting<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exiting\"></a></h3>\n<p>●\t:w - write (save) the file, but don't exit </p>\n<p>●\t:w !sudo tee % - write out the current file using sudo </p>\n<p>●\t:wq or :x or ZZ - write (save) and quit </p>\n<p>●\t:q - quit (fails if there are unsaved changes) </p>\n<p>●\t:q! or ZQ - quit and throw away unsaved changes </p>\n<p>●\t:wqa - write (save) and quit on all tabs </p>\n<h3 id=\"search-and-replace\">Search and replace<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#search-and-replace\"></a></h3>\n<p>●\t/pattern - search for pattern </p>\n<p>●\t?pattern - search backward for pattern </p>\n<p>●\t\\vpattern - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed) </p>\n<p>●\tn - repeat search in same direction </p>\n<p>●\tN - repeat search in opposite direction </p>\n<p>●\t:%s/old/new/g - replace all old with new throughout file </p>\n<p>●\t:%s/old/new/gc - replace all old with new throughout file with confirmations </p>\n<p>●\t:noh[lsearch] - remove highlighting of search matches </p>\n<h3 id=\"search-in-multiple-files\">Search in multiple files<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#search-in-multiple-files\"></a></h3>\n<p>●\t:vim[grep] /pattern/ {<code>{file}</code>} - search for pattern in multiple files </p>\n<p>e.g. :vim[grep] /foo/ *<em>/</em> </p>\n<p>●\t:cn[ext] - jump to the next match </p>\n<p>●\t:cp[revious] - jump to the previous match </p>\n<p>●\t:cope[n] - open a window containing the list of matches </p>\n<p>●\t:ccl[ose] - close the quickfix window </p>\n<h3 id=\"tabs\">Tabs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tabs\"></a></h3>\n<p>●\t:tabnew or :tabnew {page.words.file} - open a file in a new tab </p>\n<p>●\tCtrl + wT - move the current split window into its own tab </p>\n<p>●\tgt or :tabn[ext] - move to the next tab </p>\n<p>●\tgT or :tabp[revious] - move to the previous tab </p>\n<p>●\t#  gt - move to tab number # </p>\n<p>●\t:tabm[ove] # - move current tab to the <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">#th (Private)</a> position (indexed from 0) </p>\n<p>●\t:tabc[lose] - close the current tab and all its windows </p>\n<p>●\t:tabo[nly] - close all tabs except for the current one </p>\n<p>●\t:tabdo command - run the command on all tabs (e.g. :tabdo q - closes all opened tabs) </p>\n<h3 id=\"working-with-multiple-files\">Working with multiple files<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#working-with-multiple-files\"></a></h3>\n<p>●\t:e[dit] file - edit a file in a new buffer </p>\n<p>●\t:bn[ext] - go to the next buffer </p>\n<p>●\t:bp[revious] - go to the previous buffer </p>\n<p>●\t:bd[elete] - delete a buffer (close a file) </p>\n<p>●\t:b[uffer]# - go to a buffer by index # </p>\n<p>●\t:b[uffer] file - go to a buffer by file </p>\n<p>●\t:ls or :buffers - list all open buffers </p>\n<p>●\t:sp[lit] file - open a file in a new buffer and split window </p>\n<p>●\t:vs[plit] file - open a file in a new buffer and vertically split window </p>\n<p>●\t:vert[ical] ba[ll] - edit all buffers as vertical windows </p>\n<p>●\t:tab ba[ll] - edit all buffers as tabs </p>\n<p>●\tCtrl + ws - split window </p>\n<p>●\tCtrl + wv - split window vertically </p>\n<p>●\tCtrl + ww - switch windows </p>\n<p>●\tCtrl + wq - quit a window </p>\n<p>●\tCtrl + wx - exchange current window with next one </p>\n<p>●\tCtrl + w= - make all windows equal height &#x26; width </p>\n<p>●\tCtrl + wh - move cursor to the left window (vertical split) </p>\n<p>●\tCtrl + wl - move cursor to the right window (vertical split) </p>\n<p>●\tCtrl + wj - move cursor to the window below (horizontal split) </p>\n<p>●\tCtrl + wk - move cursor to the window above (horizontal split) </p>\n<h3 id=\"diff\">Diff<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#diff\"></a></h3>\n<p>●\tzf - manually define a fold up to motion </p>\n<p>●\tzd - delete fold under the cursor </p>\n<p>●\tza - toggle fold under the cursor </p>\n<p>●\tzo - open fold under the cursor </p>\n<p>●\tzc - close fold under the cursor </p>\n<p>●\tzr - reduce (open) all folds by one level </p>\n<p>●\tzm - fold more (close) all folds by one level </p>\n<p>●\tzi - toggle folding functionality </p>\n<p>●\t]c - jump to start of next change </p>\n<p>●\t[c - jump to start of previous change </p>\n<p>●\tdo or :diffg[et] - obtain (get) difference (from other buffer) </p>\n<p>●\tdp or :diffpu[t] - put difference (to other buffer) </p>\n<p>●\t:diffthis - make current window part of diff </p>\n<p>●\t:dif[fupdate] - update differences </p>\n<p>●\t:diffo[ff] - switch off diff mode for current window </p>\n<h3 id=\"the-commands-for-folding-eg-za-operate-on-one-level-to-operate-on-all-levels-use-uppercase-letters-eg-za\">The commands for folding (e.g. za) operate on one level. To operate on all levels, use uppercase letters (e.g. zA).<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-commands-for-folding-eg-za-operate-on-one-level-to-operate-on-all-levels-use-uppercase-letters-eg-za\"></a></h3>\n<h3 id=\"to-view-the-differences-of-files-one-can-directly-start-vim-in-diff-mode-by-running-vimdiff-in-a-terminal-one-can-even-set-this-as-git-difftool\">To view the differences of files, one can directly start Vim in diff mode by running vimdiff in a terminal. One can even set this as git difftool.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#to-view-the-differences-of-files-one-can-directly-start-vim-in-diff-mode-by-running-vimdiff-in-a-terminal-one-can-even-set-this-as-git-difftool\"></a></h3>\n<p><img src=\"/assets/images/2021-12-01-17-43-26.png\"></p>","noteIndex":{"id":"398cceh65hemaonxc6w22r7","title":"rodun","desc":"","updated":1673033072132,"created":1668995545797,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"notes"},"contentHash":"194939704b23314011141116733dafdb","links":[],"anchors":{"links":{"type":"header","text":"Links","value":"links","line":7,"column":0,"depth":2},"github":{"type":"header","text":"GitHub","value":"github","line":8,"column":0,"depth":3},"linkedin":{"type":"header","text":"LinkedIn","value":"linkedin","line":9,"column":0,"depth":3},"frappe-forum":{"type":"header","text":"Frappe Forum","value":"frappe-forum","line":10,"column":0,"depth":3},"hackerrank":{"type":"header","text":"HackerRank","value":"hackerrank","line":11,"column":0,"depth":3},"youtube":{"type":"header","text":"YouTube","value":"youtube","line":12,"column":0,"depth":3}},"children":["ifoa0v25wh8cu1hxwdr9h42","5u88syeac813rvqauto8x7o","nc02voic3g7pn9o0vu5lyki","67vcv6zhh0cxazsfqlaai29","44oijwqa5kph6kobar7jckg","dcbhrrtovhg5rzaathh1vzo","15dblq3xeghfzhf4xy84qol","iyj5r87cpjx65khycaiepqo","zn57yzyn4u8t0upnvhlhh86","au5edemlol3d2awpbv9v95j","hjz2keujzwyj7ts555cxr3d","wn2fr0o5xhabmh5vfkevsvj","58xds0229zowl3885oqf38y"],"parent":null,"data":{},"body":"## Links\n### [GitHub](https://github.com/Robproject)\n### [LinkedIn](https://www.linkedin.com/in/rodun/)\n### [Frappe Forum](https://discuss.frappe.io/u/roberp/summary)\n### [HackerRank](https://www.hackerrank.com/rodun?hr_r=1)\n### [YouTube](https://www.youtube.com/channel/UCgzGBLm9bYFEFWi7_EzRB_g)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"notes"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"rodun","description":"homepage","author":"Robert Duncan","twitter":"https://twitter.com/rodunro"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","enableHierarchyDisplay":false,"siteIndex":"root","hierarchy":{"biology":{"publishByDefault":false,"customFrontmatter":[]},"civil":{"publishByDefault":false,"customFrontmatter":[]},"fitness":{"publishByDefault":false,"customFrontmatter":[]},"games":{"publishByDefault":false,"customFrontmatter":[]},"psychology":{"publishByDefault":false,"customFrontmatter":[]},"tags":{"publishByDefault":false,"customFrontmatter":[]}},"sidebarPath":"./sidebars/root.js","siteUrl":"https://rodun.dev","siteFaviconPath":"favicon.ico"}}},"__N_SSG":true}